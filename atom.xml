<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YY&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-06T01:28:48.544Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数值分析与计算方法 总结</title>
    <link href="http://example.com/2021/03/06/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/03/06/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95-%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-06T01:28:48.000Z</published>
    <updated>2021-03-06T01:28:48.544Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>数字电路实验 记录</title>
    <link href="http://example.com/2021/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%AE%9E%E9%AA%8C-%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E5%AE%9E%E9%AA%8C-%E8%AE%B0%E5%BD%95/</id>
    <published>2021-03-06T01:28:23.000Z</published>
    <updated>2021-03-06T01:28:23.654Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>离散数学 总结</title>
    <link href="http://example.com/2021/03/06/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/03/06/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-06T01:28:06.000Z</published>
    <updated>2021-03-06T11:43:43.039Z</updated>
    
    <content type="html"><![CDATA[<p>合取：\wedge</p><p>析取：\vee</p><p>否定：\neg</p><p>蕴含(条件)：\rightarrow</p><p>双条件：\leftrightarrow</p><p>推出：\Rightarrow</p><p>等价：\Leftrightarrow</p><p>任意：\forall</p><p>存在：\exists</p><a id="more"></a><ul><li>命题是具有真假值的陈述句。疑问句、感叹句、祈使句、悖论、含有变量的句子不是命题。对于后面两种情况，前者的关键在于自我指称，后者只有当确定变量时某一类失误中的具体个体，或者对x使用量词进行量化后才能得到命题。</li><li>命题的真假值统称为真值，使用 2={0,1} 表示真值集合。</li><li>原子命题被看作是一个整体，不再进行分解，从形式上看，院子命题只对事物的一个性质，或者几个事物之间一个关系进行判断，其中不包括逻辑联结词</li><li>复合命题一是可分解出更简单的命题作为子命题，二是他的真值由其子命题的真值唯一确定</li><li>命题逻辑公式：由命题变量符号和逻辑运算符按合适规则构成的符号串</li><li>命题变量符号集：当我们使用逻辑语言描述和求解某个应用问题时所需的原子命题构成的集合<br>$\bigvee$  </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;合取：\wedge&lt;/p&gt;
&lt;p&gt;析取：\vee&lt;/p&gt;
&lt;p&gt;否定：\neg&lt;/p&gt;
&lt;p&gt;蕴含(条件)：\rightarrow&lt;/p&gt;
&lt;p&gt;双条件：\leftrightarrow&lt;/p&gt;
&lt;p&gt;推出：\Rightarrow&lt;/p&gt;
&lt;p&gt;等价：\Leftrightarrow&lt;/p&gt;
&lt;p&gt;任意：\forall&lt;/p&gt;
&lt;p&gt;存在：\exists&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数字电子技术(第11版) 总结</title>
    <link href="http://example.com/2021/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF-%E7%AC%AC11%E7%89%88-%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/03/06/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF-%E7%AC%AC11%E7%89%88-%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-06T01:27:54.000Z</published>
    <updated>2021-03-06T11:29:17.053Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="第一章：基本概念"><a href="#第一章：基本概念" class="headerlink" title="第一章：基本概念"></a>第一章：基本概念</h2><ul><li>模拟量：具有连续数值</li><li>数字量：具有离散数值</li><li>数字量的优点：在处理和传输方面更有效、可靠；数字数据在保存时更简洁，在复制时更清晰（噪声几乎不会影响数字数据）</li><li>正逻辑：高电压用1表示，低电压用0表示</li><li>逻辑电平：V <sub>L(max)</sub> 和 V <sub>L(max)</sub> 之间的电压值是不可以出现的</li><li>数字波形：由一系列的正向脉冲和反向脉冲组成</li><li>脉冲：或多或少有非理想的特性。通常杂散电感和电容效应会产生超调量和震荡。杂散电容和电路电阻会产生下调量，形成时间常数不大的RC电路。</li><li>周琦数字波形：一个重要的特性就是它的占空比，他是脉冲宽度（t<sub>w</sub>）和周期(T)的比值,可以用百分比来表示:<br>占空比 = ( t<sub>w</sub>/T )*100%</li><li>位时间：每个位在一个序列里所占的固定时间间隔</li><li>时钟：具有周期波形。在数字系统中，所有波形都与时钟的时序波形同步，但时钟波形本身不携带任何信息</li><li>时序图：数字波形的图形，表示两个或以上的波形的实际时间关系，还表示波形和波形之间的相互变化关系</li><li>数据： 一组可以用来传递某种信息的位</li><li>数据的传输方式：串行和并行，串行的有点是传输所需的数据线少，但需要更长的时间来完成给定位数的传输</li><li>固定功能的逻辑设备（集成电路的封装）—-未完成</li><li>引脚编号：观察芯片封装的顶部,有缺口、小圆点或斜角边，小圆点总是紧靠着引脚1，从引脚1开始逆时针标号</li><li>固定功能的集成电路的集成度分类：SSI，MSI，LSI，VLSI，ULSI</li></ul><h2 id="第二章：数字系统、运算和编码"><a href="#第二章：数字系统、运算和编码" class="headerlink" title="第二章：数字系统、运算和编码"></a>第二章：数字系统、运算和编码</h2><ul><li>二进制的加减乘除与十进制基本无区别，跳过</li><li>求二进制数的补码：反码加1 或 从右边的最低有效位开始，直到出现第一个1并写下这些实际数位，剩下的位求反码</li><li>使用反相器和加法器可以求得二进制负数的补码</li><li>在反码形式中，负数是其相应正数的补码</li><li>在CPU之外，计算机使用协处理器依靠浮点数来执行复杂的数学计算，其目的是释放CPU资源去完成其他任务，从而提高性能，数学协处理器也被称为浮点运算。</li><li>单精度浮点二进制数：分为 符号位1位，指数8位，尾数23位<br>在尾数部分一般认为二进制小数点位于23位的左边。一般认为有个1位于尾数最左边，尽管它并没有占用实际的位置</li><li>指数中的8位表示的是偏移指数，在实际指数上加上127就可以得到，目的是允许表示很大和很小的数</li><li>二进制乘法的部分积方法步骤如下：</li></ul><p>1.确定被乘数和乘数的符号<br>2.把所有负数变为原码形式（即对负数进行补码运算）<br>3.从最低有效位开始生成部分积，将每一个相继的部分积向左移动一位<br>4.将相继的部分积与前面部分积的和相加，从而得到最后的积<br>5.若符号位为负，则对积取补码</p><ul><li>十六进制减法：利用补码，可以通过二进制数相加来进行减法的运算<br>取得十六进制数补码的方法：将16进制数转化为二进制数取补码后转化会16进制数 或 从当前位最大的十六级指数减去当前十六进制数，并加一 </li><li>BCD码：二-十进制编码</li><li>8421—BCD码加法：</li></ul><p>1.使用二进制的加法规则，将两个BCD码相加<br>2.如果4位和等于或小于9，这个和就是一个合法的BCD码<br>3.如果4位和大于9或者如果在4位一组之外产生了一个进位，那么这就是一个无效结果。在4位和上加6（0110）以跳过6个无效状态，并将编码返回8421码。如果加上6时产生进位，就把这个进位加到下一个4位一组中</p><ul><li>格雷码：无权码，并不是算数编码，也就是并没有赋予不同位的特定的权。其重要特征是，从一个码字到下一个接续码字仅有一位发生变化。此特征减小了出错的概率。</li><li>二进制到格雷码的转换： </li></ul><p>1.格雷码最高有效位等同于二进制数中相应的最高有效位<br>2.从左到右，每一对相邻的二进制编码为相加，得到下一个格雷码位，舍去进位。<br>例：<br>1- + -&gt;0- + -&gt;1- + -&gt;1- + -&gt;0  —-二进制数<br>1  1  1  0  1 —-格雷码</p><ul><li>格雷码到二进制数的转换:</li></ul><p>1.二进制数最高有效位等同于格雷码中相应的最高有效位<br>2.将所产生的每个二进制编码位加上下一相邻位置的格雷码，舍去进位。<br>例:<br>1 1 0 1 1 —-格雷码  1 0 0 1 0 —-二进制数</p><ul><li>格雷码的典型应用：轴位编码器（保证了即使光束没有精确对准，也绝对不会发生转移瞬间中的错误）</li></ul><p>——未完待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;第一章：基本概念&quot;&gt;&lt;a href=&quot;#第一章：基本概念&quot; class=&quot;headerlink&quot; title=&quot;第一章：基本概念&quot;&gt;&lt;/a&gt;第一章：基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模拟量：具有连续数值&lt;/li&gt;
&lt;li&gt;数字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对无法访问github.io进行简短记录</title>
    <link href="http://example.com/2021/01/29/%E5%AF%B9%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEgithub-io%E8%BF%9B%E8%A1%8C%E7%AE%80%E7%9F%AD%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2021/01/29/%E5%AF%B9%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEgithub-io%E8%BF%9B%E8%A1%8C%E7%AE%80%E7%9F%AD%E8%AE%B0%E5%BD%95/</id>
    <published>2021-01-29T14:27:47.000Z</published>
    <updated>2021-02-01T14:00:39.722Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>刚回到家登录自己博客就发现登不上,给出基于win10的详细操作步骤。适用于所有github.io及其他部分网站无法访问的情况</p></blockquote><a id="more"></a><p>方法：修改本机连接网络的DNS。</p><ul><li>打开设置 -&gt; 网络和Internet -&gt; 更改适配器选项 -&gt; 找到对应的网络连接,右键点击 -&gt; 属性 -&gt; Internet协议版本4 -&gt; 选择”使用下面的DNS服务器地址” -&gt; 输入”114 114 114 114” -&gt; 点击确定 -&gt; 打开DOS命令窗口 -&gt; 输入: ipconfig/flushdns -&gt; 完成</li></ul><center> 看来还是买个域名实在点 QAQ </center>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;刚回到家登录自己博客就发现登不上,给出基于win10的详细操作步骤。适用于所有github.io及其他部分网站无法访问的情况&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="疑难解答" scheme="http://example.com/tags/%E7%96%91%E9%9A%BE%E8%A7%A3%E7%AD%94/"/>
    
  </entry>
  
  <entry>
    <title>博客图片无法加载的问题解决</title>
    <link href="http://example.com/2021/01/27/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://example.com/2021/01/27/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2021-01-27T09:32:10.000Z</published>
    <updated>2021-01-28T12:48:29.495Z</updated>
    
    <content type="html"><![CDATA[<p>如题。<a href="https://www.cnblogs.com/big--Bear/p/12604330.html">这是原解答</a>，部分命令有些问题，导致无法复现。在借鉴了多个解决方案后，做一下记录。</p><a id="more"></a><p><strong>步骤简化为</strong></p><ul><li><p>对<strong>博客的根目录</strong>下的——config.yml做修改。将 <em>post_asset_folder</em> 项改为：true</p></li><li><p>在<strong>博客根目录下使用命令行</strong>安装插件（会出现一次 <strong>WARN</strong>，按照提示输入“npm audit fix”即可）</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:<span class="comment">//github.com/7ym0n/hexo-asset-image --save</span></span><br></pre></td></tr></table></figure><p>  （注意一定要在<strong>博客根目录</strong>，否则配置会失败）</p><p>  至此，每次使用命令：<strong>hexo n “文件名称”</strong>命令新建博客时，_posts目录下都会多出一个和文章名称一样的文件夹。<strong>（若第二步无法成功，手动创建名称相同的文件夹也可）</strong></p></li><li><p>将所需图片放入该文件夹。</p></li><li><p>使用： <strong></strong>   导入图片，此时 <strong>typora 无法预览效果</strong> ，但再次部署到博客上时已经可以看见图片。<strong>图片格式为png则将Markdown代码中的jpg改为png即可</strong></p></li><li><p><strong>每次尝试后都要进行以下操作哦</strong></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><p><strong>最后附上彩加小天使为证</strong>：</p><img src="/2021/01/27/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/caijia.png" class title="老婆(bushi)">]]></content>
    
    
    <summary type="html">&lt;p&gt;如题。&lt;a href=&quot;https://www.cnblogs.com/big--Bear/p/12604330.html&quot;&gt;这是原解答&lt;/a&gt;，部分命令有些问题，导致无法复现。在借鉴了多个解决方案后，做一下记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="疑难解决" scheme="http://example.com/tags/%E7%96%91%E9%9A%BE%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>Nand2Tetris chapter1</title>
    <link href="http://example.com/2021/01/27/Nand2Tetrischapter1/"/>
    <id>http://example.com/2021/01/27/Nand2Tetrischapter1/</id>
    <published>2021-01-27T06:35:17.000Z</published>
    <updated>2021-01-28T12:42:14.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布尔逻辑"><a href="#布尔逻辑" class="headerlink" title="布尔逻辑"></a>布尔逻辑</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>本章要求只使用Nand门构建所有逻辑电路，其中DMux和Mux门难度较大。</p><a id="more"></a><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><ul><li><p>离散数学中的德摩根定理没有掌握</p></li><li><p>逻辑门构建只停留在尝试的层面，并没有一个系统的构建方法。</p></li><li><p>对Nand门的物理实现并未了解</p></li><li><p>在Github上抄袭了一位大佬的DMux门的实现</p></li><li><p>需要学习逻辑电路方面内容</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>由于全部代码过于冗长，只记录相对困难的部分</p><h5 id="Multiplexor"><a href="#Multiplexor" class="headerlink" title="Multiplexor:"></a>Multiplexor:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Multiplexor:</span></span><br><span class="line"><span class="comment"> * out = a if sel == 0</span></span><br><span class="line"><span class="comment"> *       b otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">CHIP Mux &#123;</span><br><span class="line">    IN a, b, sel;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not (in=sel, out=sel1);</span><br><span class="line">    And (a=a, b=sel1, out=h1);</span><br><span class="line">    And (a=sel, b=b, out=h2);</span><br><span class="line">    Or (a=h1, b=h2, out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Demultiplexor"><a href="#Demultiplexor" class="headerlink" title="Demultiplexor:"></a>Demultiplexor:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Demultiplexor:</span></span><br><span class="line"><span class="comment"> * &#123;a, b&#125; = &#123;in, 0&#125; if sel == 0</span></span><br><span class="line"><span class="comment"> *          &#123;0, in&#125; if sel == 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">CHIP DMux &#123;</span><br><span class="line">    IN in, sel;</span><br><span class="line">    OUT a, b;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not (in=sel, out=notSel);</span><br><span class="line">And (a=in, b=notSel, out=a);</span><br><span class="line">And (a=in, b=sel, out=b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-way-demultiplexor"><a href="#4-way-demultiplexor" class="headerlink" title="4-way demultiplexor:"></a>4-way demultiplexor:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4-way demultiplexor:</span></span><br><span class="line"><span class="comment"> * &#123;a, b, c, d&#125; = &#123;in, 0, 0, 0&#125; if sel == 00</span></span><br><span class="line"><span class="comment"> *                &#123;0, in, 0, 0&#125; if sel == 01</span></span><br><span class="line"><span class="comment"> *                &#123;0, 0, in, 0&#125; if sel == 10</span></span><br><span class="line"><span class="comment"> *                &#123;0, 0, 0, in&#125; if sel == 11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">CHIP DMux4Way &#123;</span><br><span class="line">    IN in, sel[<span class="number">2</span>];</span><br><span class="line">    OUT a, b, c, d;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux(in=in,sel=sel[<span class="number">1</span>],a=tp1,b=tp2);</span><br><span class="line">DMux(in=tp1,sel=sel[<span class="number">0</span>],a=a,b=b);</span><br><span class="line">DMux(in=tp2,sel=sel[<span class="number">0</span>],a=c,b=d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-way-16-bit-multiplexor"><a href="#4-way-16-bit-multiplexor" class="headerlink" title="4-way 16-bit multiplexor:"></a>4-way 16-bit multiplexor:</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4-way 16-bit multiplexor:</span></span><br><span class="line"><span class="comment"> * out = a if sel == 00</span></span><br><span class="line"><span class="comment"> *       b if sel == 01</span></span><br><span class="line"><span class="comment"> *       c if sel == 10</span></span><br><span class="line"><span class="comment"> *       d if sel == 11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">CHIP Mux4Way16 &#123;</span><br><span class="line">    IN a[<span class="number">16</span>], b[<span class="number">16</span>], c[<span class="number">16</span>], d[<span class="number">16</span>], sel[<span class="number">2</span>];</span><br><span class="line">    OUT out[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Mux16(a=a,b=b,sel=sel[<span class="number">0</span>],out=tp1);</span><br><span class="line">Mux16(a=c,b=d,sel=sel[<span class="number">0</span>],out=tp2);</span><br><span class="line">Mux16(a=tp1,b=tp2,sel=sel[<span class="number">1</span>],out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="知识点记录"><a href="#知识点记录" class="headerlink" title="知识点记录"></a>知识点记录</h3><p>然后就是硬件的使用方法,跟正常编译器差不多,多出来了脚本选项</p><img src="/2021/01/27/Nand2Tetrischapter1/pic1.jpg" class><img src="/2021/01/27/Nand2Tetrischapter1/pic2.jpg" class><img src="/2021/01/27/Nand2Tetrischapter1/pic3.jpg" class><img src="/2021/01/27/Nand2Tetrischapter1/pic4.jpg" class>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;布尔逻辑&quot;&gt;&lt;a href=&quot;#布尔逻辑&quot; class=&quot;headerlink&quot; title=&quot;布尔逻辑&quot;&gt;&lt;/a&gt;布尔逻辑&lt;/h2&gt;&lt;h3 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h3&gt;&lt;p&gt;本章要求只使用Nand门构建所有逻辑电路，其中DMux和Mux门难度较大。&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="http://example.com/2021/01/25/%E8%90%8C%E6%96%B0%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
    <id>http://example.com/2021/01/25/%E8%90%8C%E6%96%B0%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</id>
    <published>2021-01-24T19:27:47.000Z</published>
    <updated>2021-01-28T12:42:44.578Z</updated>
    
    <content type="html"><![CDATA[<p>​        <a href="https://www.bilibili.com/video/BV1Yb411a7ty">Up主<strong>Codesheep</strong>做了MAC版的教程</a>，由于windows部分命令不同，以及github有一处微调（branch改成了main），故作记录。</p><a id="more"></a><h3 id="STEP-1"><a href="#STEP-1" class="headerlink" title="STEP 1"></a>STEP 1</h3><ul><li><p><a href="https://nodejs.org/zh-cn/">首先下载Node.js(选择LTS版本,即长期支持版)</a>，安装完成后有两个组件(Node.js和npm包管理器)，可在命令行输入：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v  </span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>  查看node和npm版本。</p></li><li><p>由于国内下载速度慢，安装淘宝的cnpm镜像源加快下载速度。在命令行中输入：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://git-scm.com/downloads">下载Git，选择windows版本</a>，下载完成后在桌面右键会出现“git bush here”的字样,即为安装成功了。可在命令行输入：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p>  查看版本</p></li><li><p>在命令行处输入：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>  安装hexo框架，完成后通过</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v </span><br></pre></td></tr></table></figure><p>  查看hexo版本。</p></li><li><p>在“开始”处找到Git，右键选择：以管理员身份运行。通过 <strong>cd xx</strong> 进入文件夹（一般都在c盘的user文件夹），输入：<strong>mkdir xxx</strong>（文件夹名称）作为存放博客相关内容的大本营。输入： <strong>cd xxx</strong> 进入博客目录，输入： </p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>  生成初始化博客</p></li><li><p>此时在Git的命令行输入 </p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>  即可启动本地博客服务。</p></li><li><p>此时在浏览器输入：<a href="http://localhost:4000/">http://localhost:4000/</a>    （本地访问地址）即可访问本地的博客啦！<strong>若长时间加载不出，尝试将上一步的命令换为:</strong></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p <span class="number">5000</span></span><br></pre></td></tr></table></figure><p>  <strong>并将访问地址改为 <a href="http://localhost:5000/">http://localhost:5000/</a></strong></p></li></ul><h3 id="STEP-2"><a href="#STEP-2" class="headerlink" title="STEP 2"></a>STEP 2</h3><p><strong>以下的命令全部在Git命令行输入</strong></p><ul><li><p>通过输入</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -n <span class="string">&quot;随便写啥&quot;</span></span><br></pre></td></tr></table></figure><p>  就能在<strong>博客文件夹\source_posts</strong>下找到一个叫<del>“随便写啥”</del>的Markdown文件。当然，也可以直接在该文件夹下创建文件，效果相同</p></li><li><p>返回博客的目录,通过输入</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ul><ul><li>重新访问本地地址即可看到更新的文章</li></ul><p><strong>本地地址一般做测试用</strong></p><h3 id="STEP-3"><a href="#STEP-3" class="headerlink" title="STEP 3"></a>STEP 3</h3><p><strong>接下来将博客部署到远端的GitHub服务器</strong></p><ul><li><p>打开Github，新建一个仓库（注意：仓库名称必须为：<strong>用户名称.github.io</strong>），然后点击 <strong>create</strong> 即可。</p></li><li><p>安装一个Git部署的插件。在博客目录下，输入：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>在博客目录下，用鼠标双击打开文件：<strong>_config.yml ** ，配置文件（我是用vscode打开的）。在文件最下方，</strong>改写 deploy ：**</p><p>   <strong>repo 行在 Github 仓库处复制仓库地址，不要照搬我的地址</strong></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/sysuyy/sysuyy.github.io.git</span></span><br><span class="line">  main: master</span><br></pre></td></tr></table></figure><p>​    <strong>保存退出!</strong></p></li></ul><ul><li><p>返回博客目录，命令行输入<strong>Github的用户名和邮箱</strong>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>部署到Github仓库：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><ul><li>此时访问地址<a href="https://yourgithubname.github.io/">https://YourGithubName.github.io</a> 即可访问你的博客。</li></ul><h3 id="STEP-4"><a href="#STEP-4" class="headerlink" title="STEP 4"></a>STEP 4</h3><ul><li><p><strong>每次对博客中内容进行修改后,要进行以下操作</strong></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><p><strong>大功告成!</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        &lt;a href=&quot;https://www.bilibili.com/video/BV1Yb411a7ty&quot;&gt;Up主&lt;strong&gt;Codesheep&lt;/strong&gt;做了MAC版的教程&lt;/a&gt;，由于windows部分命令不同，以及github有一处微调（branch改成了main），故作记录。&lt;/p&gt;</summary>
    
    
    
    
    <category term="操作记录" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Typora语法</title>
    <link href="http://example.com/2020/09/28/Typora%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2020/09/28/Typora%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/</id>
    <published>2020-09-28T01:17:20.000Z</published>
    <updated>2021-01-28T12:42:30.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p> <font face="黑体" size="5">人的一切痛苦，本质上都是对自己无能的愤怒。</font></p><p>王小波 </p></blockquote><center> <font face="黑体" size="4">Markdown语法是兼容html语言的，记住这点很重要！</font></center><a id="more"></a><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>快捷键：<strong>Ctrl+标题阶数</strong>（如：Ctrl+2）</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>在文章开始地方输入**[toc]**，即可在对应位置插入目录</p><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><p>对于标准的markdown文本，是不支持居中对齐的。还好markdown支持html语言，所以我们采用html语法格式即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;这一行需要居中&lt;/center&gt;</span><br></pre></td></tr></table></figure><p><strong>下面就是排版后的结果：</strong></p><center>这一行需要居中</center><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>快捷键<strong>Ctrl+U</strong> 显示形式为：<u>Like this</u></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>~~ “这样”~~ 显示形式为：<del>Like this</del></p><h3 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h3><p>快捷键<strong>Ctrl+B</strong> 或 文字前后各加 **</p><h3 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h3><p>快捷键<strong>Ctrl+I</strong> 或 文字前后各加 *</p><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><p>直接将图片拖入</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>使用快捷键<strong>Ctrl+K</strong></p><h3 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h3><p>4个（**`**）+编程语言即可</p><h3 id="表格使用"><a href="#表格使用" class="headerlink" title="表格使用"></a>表格使用</h3><p>快捷键<strong>Ctrl+T</strong></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="任务列表（可勾）"><a href="#任务列表（可勾）" class="headerlink" title="任务列表（可勾）"></a>任务列表（可勾）</h4><p><strong>- [ ] 文字</strong> （<strong>注</strong>：<strong>注意用空格隔开</strong>）</p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>*<em>+ 、- 、</em> （后面加空格）**</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><strong>(1.)空格</strong></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>*** 或者 - - -</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>“&gt;”+空格（<strong>注：“&gt;”个数代表缩进长度</strong>）</p><h3 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h3><p>格式 “：单词”</p><h3 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h3><p><strong>语法</strong>：行内公式输入在两个<code>$$</code>之间，行外公公式<code>$$内容公式$$</code>或<code>$$</code>+回车即可输入。</p><p><img src="https://pic1.zhimg.com/80/v2-fc1eb7e3e05ef1b0bbb7a47975db5de2_720w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-c3703593a2e990069e3834247b437206_720w.jpg" alt="img"></p><p><img src="https://picb.zhimg.com/80/v2-f525471ca6da7be4fe0cfb25717b7411_720w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-a3e3be0b70dc25c0d09a22544136174f_720w.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/v2-f8cf4f5d21042f66e5ecc0c4f1c415cb_720w.jpg" alt="img"></p><h3 id="源码模式"><a href="#源码模式" class="headerlink" title="源码模式"></a>源码模式</h3><p>快键键 <code>ctrl+/</code> 打开源码模式，显示纯粹的 Markdown 文本编辑。</p><h3 id="导出选项"><a href="#导出选项" class="headerlink" title="导出选项"></a>导出选项</h3><p>选择菜单/文件/导出，选择不同的导出形式，选择图像会导出一张文档的长截图，可作为分享图片。</p><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mermaid</span><br><span class="line">Mermaid[1] 是一种简单的类似 Markdown 的脚本语言，通过 JavaScript 编程语言，将文本转换为图片。因此，真正实现画图功能的并不是 Typora 本身，它只是内置了对 Mermaid 的支持。</span><br></pre></td></tr></table></figure><p>先在 Typora 中，输入 <strong>```mermaid</strong> 然后敲击回车，即可初始化一张空白图。</p><p><strong>流程图</strong></p><p>语法解释：<code>graph</code> 关键字就是声明一张流程图，<code>TD</code> 表示的是方向，这里的含义是 Top-Down 由上至下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br></pre></td></tr></table></figure><p> <img src="https://pic3.zhimg.com/v2-d4e7402e1dce5cefb924776e01b0bffb_b.jpg" alt="img"></p><p><strong>时序图</strong></p><p>语法解释：<code>-&gt;&gt;</code> 代表实线箭头，<code>--&gt;&gt;</code> 则代表虚线。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-decde80f8f46a4a5399f20c55bb4b00a_b.jpg" alt="img"></p><p><strong>状态图</strong></p><p>语法解释：<code>[*]</code> 表示开始或者结束，如果在箭头右边则表示结束。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stateDiagram</span><br><span class="line">    [*] --&gt; s1</span><br><span class="line">    s1 --&gt; [*]</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-b33193d8007a927648f169cf075864a8_b.jpg" alt="img"></p><p><strong>类图</strong></p><p>语法解释：<code>&lt;|--</code> 表示继承，<code>+</code> 表示 <code>public</code>，<code>-</code> 表示 <code>private</code>，学过 Java 的应该都知道。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">      Animal &lt;|-- Duck</span><br><span class="line">      Animal &lt;|-- Fish</span><br><span class="line">      Animal &lt;|-- Zebra</span><br><span class="line">      Animal : +int age</span><br><span class="line">      Animal : +String gender</span><br><span class="line">      Animal: +isMammal()</span><br><span class="line">      Animal: +mate()</span><br><span class="line">      class Duck&#123;</span><br><span class="line">          +String beakColor</span><br><span class="line">          +swim()</span><br><span class="line">          +quack()</span><br><span class="line">      &#125;</span><br><span class="line">      class Fish&#123;</span><br><span class="line">          -int sizeInFeet</span><br><span class="line">          -canEat()</span><br><span class="line">      &#125;</span><br><span class="line">      class Zebra&#123;</span><br><span class="line">          +bool is_wild</span><br><span class="line">          +run()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-b6da49f44aee84e63186d91de51596d4_b.jpg" alt="img"></p><p><strong>甘特图</strong></p><p>甘特图一般用来表示项目的计划排期，目前在工作中经常会用到。</p><p>语法也非常简单，从上到下依次是图片标题、日期格式、项目、项目细分的任务。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title 工作计划</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    section Section</span><br><span class="line">    A task           :a1, 2020-01-01, 30d</span><br><span class="line">    Another task     :after a1  , 20d</span><br><span class="line">    section Another</span><br><span class="line">    Task in sec      :2020-01-12  , 12d</span><br><span class="line">    another task      : 24d</span><br></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/v2-4e8a1f1d33213f64fd0eb3779b1e6ad2_b.jpg" alt="img"></p><p><strong>饼图</strong></p><p>饼图使用 <code>pie</code> 表示，标题下面分别是区域名称及其百分比。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/v2-804c453be09ada35d3257f1601c19d5a_b.jpg" alt="img"></p><h3 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h3><ol><li>打开主题文件夹。</li><li>将<code>.css</code>文件和相关资源（如字体或图像）复制或移动到新打开的文件夹中。</li><li>重新启动Typora，然后从<code>Themes</code>菜单中选择它。</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt; &lt;font face=&quot;黑体&quot; size=&quot;5&quot;&gt;人的一切痛苦，本质上都是对自己无能的愤怒。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;王小波 &lt;/p&gt;
&lt;/blockquote&gt;



&lt;center&gt; &lt;font face=&quot;黑体&quot; size=&quot;4&quot;&gt;Markdown语法是兼容html语言的，记住这点很重要！&lt;/font&gt;&lt;/center&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
